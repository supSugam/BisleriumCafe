@page "/my-orders"
@using BisleriumCafe.Helpers;
@inject BisleriumCafe.Services.OrderService _orderService;


@if(OrdersList.Count() == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Large" Color="Color.Dark"></MudIcon>
        <MudText Typo="Typo.h4" Color="Color.Dark" Class="fw-600">
            You have not ordered anything yet.
        </MudText>
        <MudLink Href="order-now">
<MudButton Color="Color.Dark" Variant="Variant.Filled" Class="mt-3">
                Order Now
            </MudButton>
        </MudLink>
</div>
}
else
{
    <MudTable Items="@OrdersList" Dense="false" Hover="true" Bordered="true" Striped="false" Filter="new Func<Order,bool>(FilterFunc1)">
        <ToolBarContent>
            <MudText Typo="Typo.h6" Color="Color.Dark">Your Orders</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.OrderDate)">Order Date</MudTableSortLabel></MudTh>
            <MudTh Style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.CoffeeType.CoffeeName)"></MudTableSortLabel>Coffee Name</MudTh>
            <MudTh Style="white-space: nowrap;">Add-Ins</MudTh>
            <MudTh Style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.Total)">Quantity</MudTableSortLabel></MudTh>
            <MudTh Style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.RedeemedFreeCoffeeCount)">Redeemed</MudTableSortLabel></MudTh>

            <MudTh Style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.ServiceCharge)">Service Charge</MudTableSortLabel></MudTh>

            <MudTh Style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.Discount)">Discount</MudTableSortLabel></MudTh>

            <MudTh Style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.Total)">Total</MudTableSortLabel></MudTh>

            <MudTh Style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.GrandTotal)">Grand Total</MudTableSortLabel></MudTh>

            <MudTh Style="white-space: nowrap;">
                Status
            </MudTh>

        </HeaderContent>
        <RowTemplate>
            <MudTd Class="text-center" DataLabel="Ordered At">@context.OrderDate.ToFullFormattedDate()</MudTd>
                <MudTd DataLabel="Name">@context.CoffeeType.CoffeeName</MudTd>
                <MudTd DataLabel="Add-Ins">
                    <div class="d-flex flex-column p-2 gap-1">
                        @foreach (var addIn in context.CoffeeAddIns)
                    {
                        <div class="d-flex gap-1 align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.CoffeeMaker" Color="Color.Dark"></MudIcon>
                            <MudText Color="Color.Dark" Class="fw-500">
                                @addIn.AddInName
                            </MudText>
                        </div>
                    }
                </div>
            </MudTd>
            <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
                <MudTd DataLabel="Redeemed Coffees">@context.RedeemedFreeCoffeeCount</MudTd>
                <MudTd DataLabel="Service Charge">@context.ServiceCharge</MudTd>
                <MudTd DataLabel="Discount">@context.Discount</MudTd>
                <MudTd DataLabel="Total">@context.Total</MudTd>
                <MudTd DataLabel="Grand Total">@context.GrandTotal</MudTd>
                <MudTd DataLabel="Status">
                    @{
                    string status = context.IsOrderCompleted ? "Completed" : "Pending";
                    Color statusColor = context.IsOrderCompleted ? Color.Success : Color.Dark;
                }
                <MudChip Color="statusColor" Style="color: black;">
                    <MudText Style="color:#fff">
                        @status

                    </MudText>

                </MudChip>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

}

@code {
    private string searchString1 = "";
    private IEnumerable<Order> OrdersList = new List<Order>();

    private bool FilterFunc1(Order order) => FilterFunc(order, searchString1);
    private bool FilterFunc(Order order, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (order.CoffeeType.CoffeeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(0);
        OrdersList = _orderService.GetAllMyOrders();
    }
}
