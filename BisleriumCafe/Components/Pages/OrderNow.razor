@page "/order-now"
@using BisleriumCafe.Components.Coffee;
@using BisleriumCafe.Components.Reusables;
@using BisleriumCafe.Components.User;
@using BisleriumCafe.Helpers;
@inject ISnackbar Snackbar;
@inject BisleriumCafe.Repositories.Warehouse<CoffeeType> _coffeeWarehouse;
@inject BisleriumCafe.Repositories.Warehouse<CoffeeAddIn> _addinWarehouse;
@inject BisleriumCafe.Services.AuthService _authService;
@inject BisleriumCafe.Services.OrderService _orderService;
@inject IDialogService DialogService;
@inject NavigationManager _navigationManager;

<div class="w-100 d-flex justify-content-between">
        <MudText Typo="Typo.h6" Color="Color.Dark">
            Order Mode: <strong>
                @(ActiveMember is null ? "For Normal" : "For Member")
            </strong>
        </MudText>
        @{
            string IconString = ActiveMember is null ? Icons.Material.Filled.InsertEmoticon : Icons.Material.Filled.RestartAlt;
            string ButtonText = ActiveMember is null ? "Switch to Member Mode" : "Switch to Customer Mode";
        }
    <MudButton StartIcon="@IconString" Color="Color.Dark" Variant="Variant.Filled" Size="Size.Medium" OnClick="UpdateOrderMode">
        @ButtonText
</MudButton>
</div>

@if (ActiveMember is not null)
{
    <MudGrid>
        <ContentCardWithIcon Content="@ActiveMember.TotalOrders.ToString()" Title="Total Orders" Icon="@Icons.Material.Filled.ShoppingBasket" />
        @{
            string membershipStatus = ActiveMember.IsRegularMember ? "Yes" : "No";
            string freeCoffeeProgress = $"{ActiveMember.FreeCoffeeProgress.ToString()}/10";
        }
        <ContentCardWithIcon Content="@membershipStatus" Title="Regular Member" Icon="@Icons.Material.Filled.Loyalty" />
        <ContentCardWithIcon Content="@ActiveMember.FreeCoffeeCount.ToString()" Title="Free Coffee Count" Icon="@Icons.Material.Filled.MoneyOff" />
        <ContentCardWithIcon Content="@freeCoffeeProgress" Title="Free Coffee Progress" Icon="@Icons.Material.Filled.Stairs" />
    </MudGrid>
}

<div class="d-flex gap-3 w-100 flex-column">
    <div class="d-flex gap-2 justify-space-between flex-wrap">

    <MudText Typo="Typo.h5" Color="Color.Dark" Class="fw-600">
        Select Coffee Type
    </MudText>
        <MudText Color="Color.Default" Typo="Typo.h6" Class="fw-700">
            ☕ 9% Discount on orders above Rs. 499 ! (Capped at Rs. 99)
        </MudText>
    </div>
    <MudGrid>
        @foreach (CoffeeType coffeeType in _coffeeTypes)
        {
            <CoffeeCardMini IsSelected="@IsCoffeeTypeSelected(coffeeType)"
                            OnSelectClick="(CoffeeType? coffeeType)=>OnCoffeeCardClick(coffeeType)"
                            CoffeeType="coffeeType" />
        }
    </MudGrid>
</div>
<MudDivider />
<div class="d-flex gap-3 w-100 flex-column">
    <MudText Typo="Typo.h5" Color="Color.Dark" Class="fw-600">
        Select Addin for your coffee
    </MudText>
    <MudGrid>
        @foreach (CoffeeAddIn coffeeAddIn in _coffeeAddins)
        {
            <AddinCardMini IsSelected="@IsAddInSelected(coffeeAddIn)"
                           OnSelectClick="(CoffeeAddIn? coffeeAddIn)=>OnCoffeeAddInClick(coffeeAddIn)"
                           CoffeeAddIn="coffeeAddIn" />
        }
    </MudGrid>
</div>
<MudDivider />
@if(SelectedCoffeeType is not null)
{
    <div class="d-flex justify-space-between align-items-center">
        <div class="d-flex flex-column gap-1">
                <MudText Typo="Typo.body1" Color="Color.Dark">
                    You have @FreeCoffeeCount free coffee(s) to redeem.
                    @_authService?.CurrentMember?.FreeCoffeeCount
                </MudText>
            <MudSwitch Label="Redeem Free Coffee"
                Disabled="FreeCoffeeCount==0"
                @bind-Value="@RedeemFreeCoffee" Color="Color.Dark" UnCheckedColor="Color.Default" />

            <div class="d-flex gap-1 align-items-center">
                <MudText Typo="Typo.body1" Color="Color.Dark">
                    Total Price:
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Dark" Class="ml-auto">
                    <strong>
                        @TotalPrice.ToFormattedDecimal()
                    </strong>
                </MudText>
            </div>
            <div class="d-flex gap-1 align-items-center">
                <MudText Typo="Typo.body1" Color="Color.Dark">
                    Service Charge (10%):
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Dark" Class="ml-auto">
                    <strong>
                        @ServiceCharge.ToFormattedDecimal()
                    </strong>
                </MudText>
            </div>
            <div class="d-flex gap-1 align-items-center">
                <MudText Typo="Typo.body1" Color="Color.Dark">
                    @{
                        string discountText = _authService.CurrentMember is not null && _authService.CurrentMember.IsRegularMember == true ? "(Membership 10%)" : TotalPrice > 499 ? "(9% Discount)" : "(No Discount)";
                    }
                    Discount @discountText:
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Dark" Class="ml-auto">
                    <strong>
                        @Discount.ToFormattedDecimal()
                    </strong>
                </MudText>
            </div>
            <div class="d-flex gap-1 align-items-center">
                <MudText Typo="Typo.body1" Color="Color.Dark">
                    Grand Total:
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Dark" Class="ml-auto">
                    <strong>
                        @GrandTotal.ToFormattedDecimal()
                    </strong>
                </MudText>
            </div>
        </div>
        <div class="d-flex flex-column gap-1">
            <div class="d-flex gap-1 align-items-center">
                <MudText Typo="Typo.body1" Color="Color.Dark">
                    Quantity:
                </MudText>
                <div class="d-flex gap-1 align-items-center ml-auto">
                    <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Dark" OnClick="()=>{
if(Quantity==1) return;
Quantity--;
}" />
                    <MudText Typo="Typo.body1" Color="Color.Dark">
                        <strong>
                            @Quantity
                        </strong>
                    </MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Dark" OnClick="()=>Quantity++" />
                </div>
            </div>
            <MudButton OnClick="OnOrderSubmit" Size="Size.Medium" Color="Color.Dark" Variant="Variant.Filled" Class="mt-2">
                Pay and Order
            </MudButton>
        </div>
    </div>

}


@code {
    protected override async Task OnInitializedAsync()
    {
        _coffeeTypes = _coffeeWarehouse.GetAll();
        _coffeeAddins = _addinWarehouse.GetAll();
    }

    private Member? ActiveMember =>_authService.CurrentMember;
    private IDialogReference RegisterMemberDialogRef;
    private IDialogReference UpdateMemberDialogRef;

    // Update Order Mode
    private async void UpdateOrderMode()
    {
        if(ActiveMember is null)
        {
            RenderFragment fragment = builder =>
    {
        builder.OpenComponent(0, typeof(UpdateActiveMember));
        builder.AddAttribute(1, "OnConfirmEditClick", new Func<TaskResponse, Task>(async (TaskResponse response) =>
    {
        if (response.IsSuccess)
        {
            UpdateMemberDialogRef.Close();
            StateHasChanged();
        }
    }));
        builder.CloseComponent();
    };
            var parameters = new DialogParameters<Dialog>();
            parameters.Add(nameof(Dialog.ChildContent), fragment);
            parameters.Add("Title", "Update Member");
            parameters.Add("ShowDialogActions", false);
            UpdateMemberDialogRef = DialogService.Show<Dialog>("Update Member", parameters);
        }
        else
        {
            TaskResponse response = await _authService.RemoveCurrentMember(); 
                            Snackbar.Add(response.Message, response.IsSuccess ? Severity.Success : Severity.Error);
        }

    }

    // Register Member

    private async void RegisterMember()
    {
        RenderFragment fragment = builder =>
        {
            builder.OpenComponent(0, typeof(RegisterMember));
            builder.AddAttribute(1, "OnConfirmEditClick", new Func<TaskResponse, Task>(async (TaskResponse response) =>
            {
                if (response.IsSuccess)
                {
                    RegisterMemberDialogRef.Close();
                }
            }));
            builder.CloseComponent();
        };
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(nameof(Dialog.ChildContent), fragment);
        parameters.Add("Title", "Register Member");
        parameters.Add("ShowDialogActions", false);
        RegisterMemberDialogRef = DialogService.Show<Dialog>("Register Member", parameters);
    }

    // Data for Order
    private CoffeeType? SelectedCoffeeType { get; set; }
    private List<CoffeeAddIn> SelectedCoffeeAddins = new();
    private int Quantity { get; set; } = 1;

    private decimal GetTotalPrice()
    {
        decimal TotalPrice = 0;
        SelectedCoffeeAddins.ForEach(addin => TotalPrice += addin.AddInPrice * Quantity);
        TotalPrice += SelectedCoffeeType.CoffeePrice * Quantity;

        if(RedeemFreeCoffee && FreeCoffeeCount != 0)
        {
            if(Quantity == FreeCoffeeCount)
            {
                TotalPrice = 0;
                RedeemedFreeCoffeeCount = Quantity;
            }
            if(Quantity < FreeCoffeeCount){
                TotalPrice = TotalPrice - (SelectedCoffeeType.CoffeePrice * Quantity + SelectedCoffeeAddins.Sum(addin=>addin.AddInPrice * Quantity));
                RedeemedFreeCoffeeCount = Quantity;
            }

            if(Quantity > FreeCoffeeCount)
            {
                TotalPrice = TotalPrice - (SelectedCoffeeType.CoffeePrice * FreeCoffeeCount + SelectedCoffeeAddins.Sum(addin=>addin.AddInPrice * FreeCoffeeCount));
                RedeemedFreeCoffeeCount = FreeCoffeeCount;
            }

        }
        return TotalPrice;
    }

    private decimal TotalPrice => GetTotalPrice();
    private decimal Discount
    {
        get
        {
            return _authService.CurrentMember is not null && _authService.CurrentMember.IsRegularMember == true ? TotalPrice / 10 : TotalPrice > 499 ? TotalPrice / 9 > 99 ? 99 : TotalPrice / 9 : 0;
        }
    }

    private decimal ServiceCharge => TotalPrice / 10; // 10% service charge
    private decimal GrandTotal => TotalPrice - Discount + ServiceCharge;
    private bool RedeemFreeCoffee { get; set; } = false;
    private int FreeCoffeeCount => _authService.CurrentMember is not null ? _authService.CurrentMember.FreeCoffeeCount : 0;
    private int RedeemedFreeCoffeeCount = 0;

    private IEnumerable<CoffeeType> _coffeeTypes;

    private CoffeeType? OnCoffeeCardClick(CoffeeType? coffeeType) => SelectedCoffeeType = coffeeType;

    private bool IsCoffeeTypeSelected(CoffeeType coffeeType)
    {
        return SelectedCoffeeType != null && SelectedCoffeeType.Id == coffeeType.Id;
    }

    private IEnumerable<CoffeeAddIn> _coffeeAddins;

    private void OnCoffeeAddInClick(CoffeeAddIn? coffeeAddin)

{
    if(coffeeAddin is null) return;
        if (SelectedCoffeeAddins.Contains(coffeeAddin))
        {
            SelectedCoffeeAddins.Remove(coffeeAddin);
        }
        else
        {
            SelectedCoffeeAddins.Add(coffeeAddin);
        }
    }

    private bool IsAddInSelected(CoffeeAddIn coffeeAddin)
    {
        return SelectedCoffeeAddins.Contains(coffeeAddin);
    }

    private async void OnOrderSubmit()
    {
        if (_authService.CurrentMember is null)
        {
            // Normal Order
            Snackbar.Add("Please login to place an order", Severity.Error);
            return;
        }
        if (SelectedCoffeeType == null)
        {
            Snackbar.Add("Please select a coffee type", Severity.Error);
            return;
        }

        Order order = new();
        order.CoffeeType = SelectedCoffeeType;
        order.CoffeeAddIns = SelectedCoffeeAddins;
        order.Quantity = Quantity;
        order.Total = TotalPrice;
        order.Discount = Discount;
        order.ServiceCharge = ServiceCharge;
        order.GrandTotal = GrandTotal;
        if(RedeemFreeCoffee)
        {
            order.RedeemedFreeCoffeeCount = RedeemedFreeCoffeeCount;
        }
        if(ActiveMember is not null)
        {
            order.CustomerId = _authService.CurrentMember.Id;
            order.CustomerName = _authService.CurrentMember.FullName;
            order.CustomerUserName = _authService.CurrentMember.UserName;
        }

        var parameters = new DialogParameters<Dialog>();
        parameters.Add("Title", "Confirm Order");
        parameters.Add("TitleIcon", Icons.Material.Filled.Coffee);
        parameters.Add("ConfirmButtonText", "Confirm");
        parameters.Add("ConfirmButtonColor", Color.Dark);

        RenderFragment rf =@<MudText Typo="Typo.body1" Color="Color.Dark"> Are you sure you want to order? You cannot cancel an order once it's placed.</MudText>;

        parameters.Add(nameof(Dialog.ChildContent), rf);

        var dialog = await DialogService.ShowAsync<Dialog>("Order Coffee", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {

                TaskResponse response = await _orderService.OrderACoffee(order);
                Snackbar.Add(response.Message, response.IsSuccess ? Severity.Success : Severity.Error);
        }
        
    }

}
