@page "/order-now"
@using BisleriumCafe.Components.Coffee;
@inject ISnackbar Snackbar;
@inject BisleriumCafe.Repositories.Repository<CoffeeType> _coffeeRepository;
@inject BisleriumCafe.Repositories.Repository<CoffeeAddIn> _addinRepository;
<div class="d-flex gap-3 w-100 flex-column">
    <MudText Typo="Typo.h4" Color="Color.Dark" Class="fw-semibold">
        Select Coffee Type
    </MudText>
<MudGrid>
    @foreach (CoffeeType coffeeType in _coffeeTypes)
    {
        <CoffeeCardMini IsSelected="@IsCoffeeTypeSelected(coffeeType)"
                    OnSelectClick="(CoffeeType? coffeeType)=>OnCoffeeCardClick(coffeeType)"
            CoffeeType="coffeeType" />
    }
</MudGrid>
</div>
<MudDivider />
<div class="d-flex gap-3 w-100 flex-column">
    <MudText Typo="Typo.h4" Color="Color.Dark" Class="fw-semibold">
        Select Addin for your coffee
    </MudText>
    <MudGrid>
        @foreach (CoffeeAddIn coffeeAddIn in _coffeeAddins)
        {
            <AddinCardMini IsSelected="@IsAddInSelected(coffeeAddIn)"
                           OnSelectClick="(CoffeeAddIn? coffeeAddIn)=>OnCoffeeCardClick(coffeeAddIn)"
                           CoffeeAddIn="coffeeAddIn" />
        }
    </MudGrid>
</div>
<MudDivider />
<div class="d-flex justify-space-between align-items-center">
    <div class="d-flex flex-column gap-1">
<MudText Typo="Typo.body1" Color="Color.Dark">
            Selected Coffee: <strong>
@(SelectedCoffeeType?.CoffeeName ?? "None")
            </strong>
        </MudText>
        <MudText Typo="Typo.body1" Color="Color.Dark">
            Selected Addin: <strong>
@(SelectedCoffeeAddin?.AddInName ?? "None")
            </strong>
        </MudText>
    </div>
    <div class="d-flex flex-column gap-1">
        <div class="d-flex gap-1 align-items-center">
            <MudText Typo="Typo.body1" Color="Color.Dark">
                Quantity:
            </MudText>
            <div class="d-flex gap-1 align-items-center ml-auto">



                <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Dark" OnClick="()=>{
if(Quantity>1){
Quantity--;
} else{
return;
}
}" />
                <MudText Typo="Typo.body1" Color="Color.Dark">
                    <strong>
                        @Quantity
                    </strong>
                </MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Dark" OnClick="()=>Quantity++" />
            </div>
        </div>


        <MudText Typo="Typo.body1" Color="Color.Dark">
            Total Price: <strong>
                @TotalPrice
            </strong>
        </MudText>
        <MudButton OnClick="OnOrderSubmit" Size="Size.Medium" Color="Color.Dark" Variant="Variant.Filled" Class="mt-2">
            Order Now
        </MudButton>
    </div>
</div>


@code {
    protected override async Task OnInitializedAsync()
    {
        _coffeeTypes = _coffeeRepository.GetAll();
        _coffeeAddins = _addinRepository.GetAll();
    }

    // Data for Order
    private CoffeeType? SelectedCoffeeType { get; set; }
    private CoffeeAddIn? SelectedCoffeeAddin { get; set; }
    private int Quantity { get; set; } = 1;

    private int TotalPrice => (SelectedCoffeeType?.CoffeePrice ?? 0)*Quantity + (SelectedCoffeeAddin?.AddInPrice ?? 0)*Quantity;

    private IEnumerable<CoffeeType> _coffeeTypes;

    private CoffeeType? OnCoffeeCardClick(CoffeeType? coffeeType) => SelectedCoffeeType = coffeeType;

    private bool IsCoffeeTypeSelected(CoffeeType coffeeType)
    {
        return SelectedCoffeeType != null && SelectedCoffeeType.Id == coffeeType.Id;
    }

    private IEnumerable<CoffeeAddIn> _coffeeAddins;

    private CoffeeAddIn? OnCoffeeCardClick(CoffeeAddIn? coffeeAddin) => SelectedCoffeeAddin = coffeeAddin;

    private bool IsAddInSelected(CoffeeAddIn coffeeAddin)
    {
        return SelectedCoffeeAddin != null && SelectedCoffeeAddin.Id == coffeeAddin.Id;
    }

    private void OnOrderSubmit()
    {
        if(SelectedCoffeeType == null)
        {
            Snackbar.Add("Please select a coffee type", Severity.Error);
            return;
        }
if(SelectedCoffeeAddin == null)
        {
            Snackbar.Add("Please select a coffee addin", Severity.Error);
            return;
        }


    }

}
