@page "/order-now"
@using BisleriumCafe.Components.Coffee;
@inject ISnackbar Snackbar;
@inject BisleriumCafe.Repositories.Repository<CoffeeType> _coffeeRepository;
@inject BisleriumCafe.Repositories.Repository<CoffeeAddIn> _addinRepository;
@inject BisleriumCafe.Services.AuthService _authService;
@inject BisleriumCafe.Services.OrderService _orderService;


<div class="d-flex gap-3 w-100 flex-column">
    <div class="d-flex gap-2 justify-space-between flex-wrap">

    <MudText Typo="Typo.h5" Color="Color.Dark" Class="fw-600">
        Select Coffee Type
    </MudText>
        <MudText Color="Color.Default" Typo="Typo.h6" Class="fw-700">
            ☕ 11% Discount on orders above Rs. 499 !
        </MudText>
    </div>
    <MudGrid>
        @foreach (CoffeeType coffeeType in _coffeeTypes)
        {
            <CoffeeCardMini IsSelected="@IsCoffeeTypeSelected(coffeeType)"
                            OnSelectClick="(CoffeeType? coffeeType)=>OnCoffeeCardClick(coffeeType)"
                            CoffeeType="coffeeType" />
        }
    </MudGrid>
</div>
<MudDivider />
<div class="d-flex gap-3 w-100 flex-column">
    <MudText Typo="Typo.h5" Color="Color.Dark" Class="fw-600">
        Select Addin for your coffee
    </MudText>
    <MudGrid>
        @foreach (CoffeeAddIn coffeeAddIn in _coffeeAddins)
        {
            <AddinCardMini IsSelected="@IsAddInSelected(coffeeAddIn)"
                           OnSelectClick="(CoffeeAddIn? coffeeAddIn)=>OnCoffeeCardClick(coffeeAddIn)"
                           CoffeeAddIn="coffeeAddIn" />
        }
    </MudGrid>
</div>
<MudDivider />
@if(SelectedCoffeeType is not null)
{
    <div class="d-flex justify-space-between align-items-center">
        <div class="d-flex flex-column gap-1">
                <MudText Typo="Typo.body1" Color="Color.Dark">
                    You have @FreeCoffeeCount free coffee(s) to redeem.
                    @_authService?.CurrentCustomer?.FreeCoffeeCount
                </MudText>
            <MudSwitch Label="Redeem Free Coffee"
                Disabled="FreeCoffeeCount==0"
                @bind-Value="@RedeemFreeCoffee" Color="Color.Dark" UnCheckedColor="Color.Default" />

            <div class="d-flex gap-1 align-items-center">
                <MudText Typo="Typo.body1" Color="Color.Dark">
                    Total Price:
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Dark" Class="ml-auto">
                    <strong>
                        @TotalPrice
                    </strong>
                </MudText>
            </div>
            <div class="d-flex gap-1 align-items-center">
                <MudText Typo="Typo.body1" Color="Color.Dark">
                    Service Charge (10%):
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Dark" Class="ml-auto">
                    <strong>
                        @ServiceCharge
                    </strong>
                </MudText>
            </div>
            <div class="d-flex gap-1 align-items-center">
                <MudText Typo="Typo.body1" Color="Color.Dark">
                    Discount:
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Dark" Class="ml-auto">
                    <strong>
                        @Discount
                    </strong>
                </MudText>
            </div>
            <div class="d-flex gap-1 align-items-center">
                <MudText Typo="Typo.body1" Color="Color.Dark">
                    Grand Total:
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Dark" Class="ml-auto">
                    <strong>
                        @GrandTotal
                    </strong>
                </MudText>
            </div>
        </div>
        <div class="d-flex flex-column gap-1">
            <div class="d-flex gap-1 align-items-center">
                <MudText Typo="Typo.body1" Color="Color.Dark">
                    Quantity:
                </MudText>
                <div class="d-flex gap-1 align-items-center ml-auto">
                    <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Dark" OnClick="()=>{
if(Quantity==1) return;
Quantity--;
}" />
                    <MudText Typo="Typo.body1" Color="Color.Dark">
                        <strong>
                            @Quantity
                        </strong>
                    </MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Dark" OnClick="()=>Quantity++" />
                </div>
            </div>
            <MudButton OnClick="OnOrderSubmit" Size="Size.Medium" Color="Color.Dark" Variant="Variant.Filled" Class="mt-2">
                Order Now
            </MudButton>
        </div>
    </div>

}


@code {
    protected override async Task OnInitializedAsync()
    {
        _coffeeTypes = _coffeeRepository.GetAll();
        _coffeeAddins = _addinRepository.GetAll();
    }

    // Data for Order
    private CoffeeType? SelectedCoffeeType { get; set; }
    private CoffeeAddIn? SelectedCoffeeAddin { get; set; }
    private int Quantity { get; set; } = 1;

    private decimal GetTotalPrice()
    {
        decimal TotalPrice = 0;
        if (SelectedCoffeeType is null) return 0;
        if (SelectedCoffeeAddin is not null)
        {
            TotalPrice = SelectedCoffeeType.CoffeePrice * Quantity + SelectedCoffeeAddin.AddInPrice * Quantity;
        }
        else
        {
            TotalPrice = SelectedCoffeeType.CoffeePrice * Quantity;
        }


        if(RedeemFreeCoffee && FreeCoffeeCount != 0)
        {
            if(Quantity == FreeCoffeeCount)
            {
                TotalPrice = 0;
                RedeemedFreeCoffeeCount = Quantity;
            }
            if(Quantity < FreeCoffeeCount){
                TotalPrice = TotalPrice - (SelectedCoffeeType.CoffeePrice * Quantity);
                RedeemedFreeCoffeeCount = Quantity;
            }

            if(Quantity > FreeCoffeeCount)
            {
                TotalPrice = TotalPrice - (SelectedCoffeeType.CoffeePrice * FreeCoffeeCount);
                RedeemedFreeCoffeeCount = FreeCoffeeCount;
            }

        }
        return TotalPrice;
    }

    private decimal TotalPrice => GetTotalPrice();
    private decimal Discount => TotalPrice > 499 ? TotalPrice / 11 : 0;
    private decimal ServiceCharge => TotalPrice / 10; // 10% service charge
    private decimal GrandTotal => TotalPrice - Discount + ServiceCharge;
    private bool RedeemFreeCoffee { get; set; } = false;
    private int FreeCoffeeCount => _authService.CurrentCustomer is not null ? _authService.CurrentCustomer.FreeCoffeeCount : 0;
    private int RedeemedFreeCoffeeCount = 0;

    private IEnumerable<CoffeeType> _coffeeTypes;

    private CoffeeType? OnCoffeeCardClick(CoffeeType? coffeeType) => SelectedCoffeeType = coffeeType;

    private bool IsCoffeeTypeSelected(CoffeeType coffeeType)
    {
        return SelectedCoffeeType != null && SelectedCoffeeType.Id == coffeeType.Id;
    }

    private IEnumerable<CoffeeAddIn> _coffeeAddins;

    private CoffeeAddIn? OnCoffeeCardClick(CoffeeAddIn? coffeeAddin) => SelectedCoffeeAddin = coffeeAddin;

    private bool IsAddInSelected(CoffeeAddIn coffeeAddin)
    {
        return SelectedCoffeeAddin != null && SelectedCoffeeAddin.Id == coffeeAddin.Id;
    }

    private async void OnOrderSubmit()
    {
        if (_authService.CurrentUser is null)
        {
            Snackbar.Add("Please login to place an order", Severity.Error);
            return;
        }
        if (SelectedCoffeeType == null)
        {
            Snackbar.Add("Please select a coffee type", Severity.Error);
            return;
        }

        Order order = new();
        order.CoffeeType = SelectedCoffeeType;
        order.CoffeeAddIn = SelectedCoffeeAddin;
        order.Quantity = Quantity;
        order.Total = TotalPrice;
        order.Discount = Discount;
        order.ServiceCharge = ServiceCharge;
        order.GrandTotal = GrandTotal;
        if(SelectedCoffeeAddin is not null)
        {
           order.CoffeeAddIn = SelectedCoffeeAddin;
        }

        // TaskResponse reponse = await _orderService.OrderACoffee(order);
    }

}
