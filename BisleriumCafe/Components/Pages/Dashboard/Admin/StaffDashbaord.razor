@page "/dashboard/staffs"
@using System.ComponentModel.DataAnnotations
@using BisleriumCafe.Helpers
@using BisleriumCafe.Services
@using BisleriumCafe.Components.Reusables
@using BisleriumCafe.Components.User
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;
@inject Microsoft.AspNetCore.Components.NavigationManager _navigationManager;
@inject BisleriumCafe.Services.AuthService _authService;
@inject BisleriumCafe.Repositories.Repository<User> _userRepository;

<MudText Typo="Typo.h4" Color="Color.Dark">
    Bislerium Cafe's Staffs
</MudText>

<EditForm Model="@RegisterStaffModel" OnValidSubmit="OnRegisterStaffSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Full name" HelperText="Atleast 3 characters."
                                  @bind-Value="RegisterStaffModel.FullName" For="@(() => RegisterStaffModel.FullName)" />
                    <MudTextField Label="Username" HelperText="Atleast 3 characters."
                                  @bind-Value="RegisterStaffModel.Username" For="@(() => RegisterStaffModel.Username)" />

                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="RegisterStaffModel.Password" For="@(() => RegisterStaffModel.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="RegisterStaffModel.RePassword" For="@(() => RegisterStaffModel.RePassword)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Dark" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>
<MudTable Items="@Elements" Dense="false" Hover="true" Bordered="true" Striped="false" Filter="new Func<User,bool>(FilterFunc1)" @bind-SelectedItem="SelectedUser">
    <ToolBarContent>
        <MudText Typo="Typo.h6" Color="Color.Dark">Coffee Types</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<User, object>(x=>x.FullName)">Name</MudTableSortLabel></MudTh>
        <MudTh Style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<User, object>(x=>x.UserName)">Username</MudTableSortLabel></MudTh>
        <MudTh Style="white-space: nowrap;"><MudTableSortLabel SortBy="new Func<User, object>(x=>x.CreatedAt)">Created At</MudTableSortLabel></MudTh>
        <MudTh Style="white-space: nowrap;">Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.FullName</MudTd>
            <MudTd DataLabel="Username">@context.UserName</MudTd>
            <MudTd DataLabel="CreatedAt">
                @Date.GetFormattedDate(context.CreatedAt)
        </MudTd>
        @*             <MudTd DataLabel="Added By">
        @if (context.CreatedBy is not null)
        {
        <MudText Typo="Typo.body2">@_coffeeService.GetCreatedBy(context.CreatedBy)</MudText>
        }
        else
        {
        <MudText Typo="Typo.body2">--</MudText>
        }
        </MudTd> *@
        <MudTd DataLabel="Actions">

            <MudButton OnClick="(()=>OnEditStaffClick(context))" Color="Color.Dark" Size="Size.Small" Class="mr-3 cursor-pointer">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Dark" Size="Size.Small" />

            </MudButton>
            <MudButton OnClick="(()=>OnDeleteStaffClick(context))" Color="Color.Dark" Size="Size.Small" Class="mr-3 cursor-pointer">
                <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Dark" Size="Size.Small" />
            </MudButton>

        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>



@code {
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(0);
        Elements = _userRepository.GetAll().Where(user => user.Role == UserRole.Staff);
    }
    private bool FilterFunc1(User user) => FilterFunc(user, searchString1);
    private bool FilterFunc(User user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase) || user.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    private string searchString1 = "";
    private User SelectedUser;
    private IDialogReference EditDialogRef;

    private IEnumerable<User> Elements = new List<User>();

    class RegisterStaffForm
    {
        [Required]
        [StringLength(32, ErrorMessage = "Name should be 3 to 32 characters long. ", MinimumLength = 3)]
        public string FullName { get; set; } = "";

        [Required]
        [StringLength(32, ErrorMessage = "Username should be 3 to 32 characters long. ", MinimumLength = 3)]
        public string Username { get; set; } = "";

        [Required]
        [StringLength(32, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 4)]
        public string Password { get; set; } = "";

        [Required]
        [Compare(nameof(Password), ErrorMessage = "Password does not match.")]
        public string RePassword { get; set; } = "";
    }

    RegisterStaffForm RegisterStaffModel = new();

    private async void OnRegisterStaffSubmit(EditContext context)
    {
        StateHasChanged();
        string username = RegisterStaffModel.Username;
        string password = RegisterStaffModel.Password;
        string fullName = RegisterStaffModel.FullName;
        string rePassword = RegisterStaffModel.RePassword;

        if (username == "" || password == "" || fullName == "" || rePassword == "")
        {
            Snackbar.Add("Please fill all the fields", MudBlazor.Severity.Error);
            return;
        }
        try
        {
            TaskResponse response = await _authService.Register(username, fullName, password, UserRole.Staff);
            Snackbar.Add(response.Message, response.IsSuccess ? MudBlazor.Severity.Success : MudBlazor.Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
        }
    }

    private async Task UpdateSelectedUser(User user)
    {
        StateHasChanged();
        try
        {
            TaskResponse response = await _authService.UpdateUserDetails(user.Id,user.FullName,user.UserName,user.PasswordHash);
           Snackbar.Add(response.Message, response.IsSuccess ? MudBlazor.Severity.Success : MudBlazor.Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
        }
        finally
        {
            EditDialogRef.Close();
        }
    }


    private RenderFragment GetRenderFragment(User user)
    {
        RenderFragment fragment = builder =>
        {
            builder.OpenComponent(0, typeof(EditStaffDetails));
            builder.AddAttribute(1, "User", user);
            builder.AddAttribute(2, "OnConfirmEditClick", (User user) => UpdateSelectedUser(user));
            builder.CloseComponent();
        };
        return fragment;
    }

    private void OnEditStaffClick(User user)
    {

        var parameters = new DialogParameters<Dialog>();
        parameters.Add(nameof(Dialog.ChildContent), GetRenderFragment(user));
        parameters.Add("Title", "Edit Staff Details");
        parameters.Add("ShowDialogActions", false);
        SelectedUser = user;
        EditDialogRef = DialogService.Show<Dialog>("Edit Staff Details", parameters);
    }
    private async void OnDeleteStaffClick(User user)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add("Title", "Remove Staff");
        parameters.Add("TitleIcon", Icons.Material.Filled.DeleteForever);
        parameters.Add("ConfirmButtonText", "Remove");
        parameters.Add("ConfirmButtonColor", Color.Error);

        RenderFragment rf =@<MudText Typo="Typo.body1" Color="Color.Dark"> Removing a staff is permanent, Are you sure you want to delete ?</MudText>;

        parameters.Add(nameof(Dialog.ChildContent), rf);

        var dialog = await DialogService.ShowAsync<Dialog>("Remove Staff", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                TaskResponse response = await _authService.RemoveUser(user.Id);
                Snackbar.Add(response.Message, response.IsSuccess ? MudBlazor.Severity.Success : MudBlazor.Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            }
        }
    }
}
