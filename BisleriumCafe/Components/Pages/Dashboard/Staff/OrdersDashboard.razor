@page "/dashboard/orders"
@using BisleriumCafe.Helpers;
@inject ISnackbar Snackbar;
@inject BisleriumCafe.Services.OrderService _orderService;
@inject BisleriumCafe.Services.AuthService _authService;

@if (OrdersList.Count() == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Large" Color="Color.Dark"></MudIcon>
        <MudText Typo="Typo.h4" Color="Color.Dark" Class="fw-600">
            No Orders Yet!
        </MudText>
    </div>
}
else
{
    <MudTable RowsPerPage="5" Items="@OrdersList" Dense="false" Hover="true" Bordered="true" Striped="false" Filter="new Func<Order,bool>(FilterFunc1)">
        <ToolBarContent>
            <MudText Typo="Typo.h6" Color="Color.Dark">All Orders</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="white-space: nowrap;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Order, object>(x=>x.OrderDate)">Order Date</MudTableSortLabel></MudTh>
            <MudTh Style="white-space: nowrap;">
                Ordered By
            </MudTh>
            <MudTh Style="white-space: nowrap;">Coffee Name</MudTh>
            <MudTh Style="white-space: nowrap;">Add-Ins</MudTh>
            <MudTh Style="white-space: nowrap;">
                <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Order, object>(x=>x.Total)">Quantity</MudTableSortLabel>
            </MudTh>
            <MudTh Style="white-space: nowrap;">
                <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Order, object>(x=>x.RedeemedFreeCoffeeCount)">Redeemed</MudTableSortLabel>
            </MudTh>

            <MudTh Style="white-space: nowrap;">
                Service Charge
            </MudTh>

            <MudTh Style="white-space: nowrap;">
                <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Order, object>(x=>x.Discount)">Discount</MudTableSortLabel>
            </MudTh>

            <MudTh Style="white-space: nowrap;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Order, object>(x=>x.Total)">Total</MudTableSortLabel></MudTh>

            <MudTh Style="white-space: nowrap;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Order, object>(x=>x.GrandTotal)">Grand Total</MudTableSortLabel></MudTh>

            <MudTh Style="white-space: nowrap;">
                Status
            </MudTh>

        </HeaderContent>
        <RowTemplate>
            <MudTd Class="text-center" DataLabel="Ordered At">@context.OrderDate.ToFullFormattedDate()</MudTd>
                <MudTd DataLabel="Ordered By">@context.CustomerUserName</MudTd>
                <MudTd DataLabel="Name">@context.CoffeeType.CoffeeName</MudTd>
                <MudTd DataLabel="Add-Ins">
                    <div class="d-flex flex-column p-2 gap-1">
                        @foreach (var addIn in context.CoffeeAddIns)
                    {
                        <div class="d-flex gap-1 align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.CoffeeMaker" Color="Color.Dark"></MudIcon>
                            <MudText Color="Color.Dark" Class="fw-500">
                                @addIn.AddInName
                            </MudText>
                        </div>
                    }
                </div>
            </MudTd>
            <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
                <MudTd DataLabel="Redeemed Coffees">@context.RedeemedFreeCoffeeCount</MudTd>
                <MudTd DataLabel="Service Charge">@context.ServiceCharge.ToFormattedDecimal()</MudTd>
                <MudTd DataLabel="Discount">@context.Discount.ToFormattedDecimal()</MudTd>
                <MudTd DataLabel="Total">@context.Total.ToFormattedDecimal()</MudTd>
                <MudTd DataLabel="Grand Total">@context.GrandTotal.ToFormattedDecimal()</MudTd>
                <MudTd DataLabel="Status">
                    <MudSelect Value="context.OrderStatus" ValueChanged="(OrderStatus status)=>OnStatusChanged(context, status)" T="OrderStatus" Label="Change Status" Variant="Variant.Filled">
                        <MudSelectItem Value="OrderStatus.Completed">
                            <MudIcon Icon="@Icons.Material.Filled.TaskAlt" Class="mr-1"></MudIcon>
                            Completed
                        </MudSelectItem>
                        <MudSelectItem Value="OrderStatus.Pending">
                            <MudIcon Icon="@Icons.Material.Filled.QueryBuilder" Class="mr-1"></MudIcon>
                            Pending
                        </MudSelectItem>
                    </MudSelect>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
}


@code {
    private async void OnStatusChanged(Order order, OrderStatus updatedStatus)
    {
        TaskResponse response = await _orderService.UpdateOrderStatus(order, updatedStatus);
        Snackbar.Add(response.Message, response.IsSuccess ? Severity.Success : Severity.Error);
    }

    private string searchString1 = "";
    private IEnumerable<Order> OrdersList = new List<Order>();

    private bool FilterFunc1(Order order) => FilterFunc(order, searchString1);
    private bool FilterFunc(Order order, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (order.CoffeeType.CoffeeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    // TODO: Sort Icons Color, functionality -> Done
    // TODO: ALert before LogOut -> Done
    // TODO: Customer's details in profile (Orders, Redeemed Coffees, etc) -> Done
    // TODO: Password for admin before making changes to the system (dialog) -> Done
    // TODO: Automatic membership upgrade -> Done (Yet to test)
    // TODO: progress bar while navigating to different pages
    // TODO: Stats Generation

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(0);
        OrdersList = _orderService.GetAllOrders();
    }
}
