@page "/dashboard/overview"
@using iText.Html2pdf;
@using BisleriumCafe.Helpers;
@using BisleriumCafe.Enums;
@using BisleriumCafe.Components.Report;
@using BisleriumCafe.Components.User;
@using System.Linq;
@using Microsoft.AspNetCore.Components;
@inject BisleriumCafe.Services.OrderService _orderService;
@inject BisleriumCafe.Services.AuthService _authService;
@inject BisleriumCafe.Services.PdfService _pdfService;
@inject ISnackbar Snackbar;
@inject IJSRuntime JS;
<div class="d-flex justify-content-center gap-3 flex-column">
    <MudText Typo="Typo.h4" Color="Color.Dark">
        Generate Sales Report
    </MudText>
    <div class="d-flex gap-3 shadow background-light w-100 p-4 justify-content-center flex-column">
        <MudSelect Value="_selectedDatePeriod" ValueChanged="(DatePeriod datePeriod)=>UpdateSelectedDatePeriod(datePeriod)" T="DatePeriod" Label="Select Date Period" Variant="Variant.Filled">
            <MudSelectItem Value="DatePeriod.Daily">
                <MudIcon Icon="@Icons.Material.Filled.TaskAlt" Class="mr-1"></MudIcon>
                Daily
            </MudSelectItem>
            <MudSelectItem Value="DatePeriod.Monthly">
                <MudIcon Icon="@Icons.Material.Filled.QueryBuilder" Class="mr-1"></MudIcon>
                Monthly
            </MudSelectItem>
        </MudSelect>
        @{
            bool SelectAllEnabled = SelectedYear is not null;
        }
        @if(_selectedDatePeriod == DatePeriod.Daily)
        {
            <MudDatePicker Required="true"
                           Label="Select a Date"
                           Date="@SelectedDay"
                           DateChanged="UpdateSelectedDate"
                           DateFormat="yyyy/MM/dd"
                           MinDate="@Date.GetStartOfDate(DateSpan.Year, DateTime.Today)"
                           MaxDate="@DateTime.Today"
                           Color="Color.Dark" />
        }
        @if (_selectedDatePeriod == DatePeriod.Monthly)
        {
            <MudDatePicker Required="true"
                           Label="Select an Year"
                           Date="@SelectedYear"
                           DateChanged="UpdateSelectedDate"
                           OpenTo="OpenTo.Year"
                           FixMonth="@DateTime.Today.Month"
                           FixDay="@DateTime.Today.Day"
                           DateFormat="yyyy"
                           MinDate="@Date.GetStartOfDate(DateSpan.Year, DateTime.Today)"
                           Color="Color.Dark" />

            <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                       MultiSelection="true"
                       @bind-Value="SelectedValue"
                       @bind-SelectedValues="SelectedMonths"
                       T="string"
                       Label="Select Months"
                       SelectAll="@SelectAllEnabled"
                       SelectAllText="Select all months"
                       AnchorOrigin="Origin.BottomCenter">

                @if (SelectedYear is null)
                {
                    <MudSelectItem Disabled="true" T="string">
                        Select an year first
                    </MudSelectItem>
                }
                else
                {
                    @foreach (MonthWithIndex month in AllMonthsWithIndex)
                    {
                        <MudSelectItem Disabled="Date.IsFutureMonth(new DateTime(SelectedYear.Value.Year, month.Index, 1))"
                                       T="string"
                                       Value="@month.Index.ToString()">
                            @month.Name
                        </MudSelectItem>
                    }
                }
            </MudSelect>
        }


        <MudButton Variant="Variant.Filled" Color="Color.Dark" Class="mt-2 ml-auto" OnClick="HandleReportGenerate">Generate Report</MudButton>
        @if (ShowProgress)
        {
            
        <MudProgressLinear Color="Color.Dark" Indeterminate="true"  />
        }
    </div>

    <div id="@REPORT_CONTAINER" class="d-flex p-2 flex-column gap-4 w-100">

        @if(_selectedDatePeriod == DatePeriod.Monthly && SelectedYear is not null)
        {
            @if (AllOrdersOfSelectedMonths.Count() > 0)
            {
                <MudText Typo="Typo.h5" Color="Color.Dark" Style="text-align:center">
                    Report for @GetMultiSelectionText(SelectedMonths.ToList()) of @SelectedYear.Value.Year
                </MudText>
                @foreach (IEnumerable<Order> orders in AllOrdersOfSelectedMonths)
                {
                    <SalesReportTable DatePeriod="@_selectedDatePeriod" OrderData="@orders" SelectedDate="@SelectedYear" />
                }
            }

        }

        @if (_selectedDatePeriod == DatePeriod.Daily && SelectedDay is not null)
        {
            @if (OrdersOfSelectedDay.Count() > 0)
            {
                <MudText Typo="Typo.h5" Color="Color.Dark" Style="text-align:center">
                    Report for @Date.GetFormattedDate(SelectedDay.Value)
                </MudText>

                    <SalesReportTable DatePeriod="@_selectedDatePeriod" OrderData="@OrdersOfSelectedDay" SelectedDate="@SelectedDay" />
            }
        }

    </div>
</div>
@code {

    //
    private const string REPORT_CONTAINER = "REPORT_CONTAINER";


    private async Task<bool> GeneratePdf()
    {
        string HtmlContent = await JS.InvokeAsync<string>("GetHtmlContentOfAnElement", REPORT_CONTAINER);
           // Define the characters to replace
        char[] charactersToReplace = { ':', '\\', '/', ' ' };

        // Create a regex pattern for the characters to replace
        string pattern = "[" + Regex.Escape(new string(charactersToReplace)) + "]";

        // Use Regex.Replace to replace the characters with an empty string
        string DateTimeNow = Regex.Replace(DateTime.Now.ToString(), pattern, "-");


        return await _pdfService.GeneratePdfFromHtmlContent(HtmlContent, $"{_selectedDatePeriod}SalesReport_{DateTimeNow}");

    }
    // Table Data
    List<IEnumerable<Order>> AllOrdersOfSelectedMonths = new();
    IEnumerable<Order> OrdersOfSelectedDay = new List<Order>();

    //
    private DateTime? SelectedYear { get; set; }
    private DateTime? SelectedDay { get; set; }
    private DatePeriod _selectedDatePeriod;
    private void UpdateSelectedDatePeriod(DatePeriod datePeriod)
    {
        _selectedDatePeriod = datePeriod;
    }
    private void UpdateSelectedDate(DateTime? dateTime)
    {
        if (dateTime is not null)
        {
            if (Date.IsFirstDateAfterSecondDate(dateTime, DateTime.Today))
            {
                Snackbar.Add("No Reports from the future!", Severity.Error);
                return;
            }
        }
        if(_selectedDatePeriod == DatePeriod.Daily)
        {
            SelectedDay = dateTime;
            SelectedYear = null;
        }
        else
        {
            SelectedYear = dateTime;
SelectedDay = null;
        }
    }

    private string SelectedValue { get; set; } = "Nothing selected";
    private IEnumerable<string> SelectedMonths { get; set; } = new HashSet<string>();
    private List<MonthWithIndex> AllMonthsWithIndex = Date.GetListOfMonthsWithIndex();

    private string GetMultiSelectionText(List<string> selectedMonths)
    {
        return string.Join(", ", AllMonthsWithIndex
            .Where(month => selectedMonths.Contains(month.Index.ToString()))
            .Select(month => month.Name));
    }

    //


    // Progress
    private bool ShowProgress { get; set; } = false;


    // Report Generation
    private async void HandleReportGenerate()
    {

        if (_selectedDatePeriod == DatePeriod.Daily)
        {
            // Generate Daily Report

            if(SelectedDay is null)
            {
                Snackbar.Add("Please select a date", Severity.Error);
                return;
            }
            ShowProgress = true;
            OrdersOfSelectedDay = _orderService.GetOrdersWithInTimeRange(Date.GetStartOfDate(DateSpan.Day,SelectedDay.Value), Date.GetEndOfDate(DateSpan.Day, SelectedDay.Value));

if(OrdersOfSelectedDay.Count() == 0)
            {
                Snackbar.Add("No Data Found for this date.", Severity.Error);
                ShowProgress = false;
                return;
            }

        }

        if(_selectedDatePeriod == DatePeriod.Monthly)
        {
            // Generate Monthly Report
            if (SelectedYear is null)
            {
                Snackbar.Add("Please select an year", Severity.Error);
                return;
            }

            if (SelectedMonths.Count() == 0)
            {
                Snackbar.Add("Please select atleast one month", Severity.Error);
                return;
            }
            ShowProgress = true;

            // Generate Report
            foreach (string month in SelectedMonths)
            {
                DateTime StartDate = new(SelectedYear.Value.Year, int.Parse(month), 1);
                DateTime EndDate = Date.GetEndOfDate(DateSpan.Month, StartDate);
                IEnumerable<Order> OrdersOfSelectedMonth = _orderService.GetOrdersWithInTimeRange(StartDate, EndDate);
                AllOrdersOfSelectedMonths.Add(OrdersOfSelectedMonth);
            }

            if(AllOrdersOfSelectedMonths.Count() == 0)
            {
                Snackbar.Add("No Data Found for this date.", Severity.Error);
                ShowProgress = false;
                return;
            }
        }
        bool IsGenerated = await GeneratePdf();
        ShowProgress = false;

if (IsGenerated)
        {
            Snackbar.Add("Report Generated Successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("Report Generation Failed", Severity.Error);
        }
        }
}

