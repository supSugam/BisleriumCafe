@page "/dashboard/overview"
@using iText.Html2pdf;
@using BisleriumCafe.Helpers;
@using BisleriumCafe.Enums;
@using BisleriumCafe.Components.Report;
@using BisleriumCafe.Components.User;
@using System.Linq;
@using Microsoft.AspNetCore.Components;
@inject BisleriumCafe.Services.OrderService _orderService;
@inject BisleriumCafe.Services.AuthService _authService;
@inject BisleriumCafe.Services.PdfService _pdfService;
@inject ISnackbar Snackbar;
@inject IJSRuntime JS;
<div class="d-flex justify-content-center gap-3 flex-column">
    <MudText Typo="Typo.h4" Color="Color.Dark">
        Generate Sales Report
    </MudText>
    <div class="d-flex gap-3 shadow background-light w-100 p-4 justify-content-center flex-column">

        <MudSelect Value="_selectedDatePeriod" ValueChanged="(DatePeriod datePeriod)=>UpdateSelectedDatePeriod(datePeriod)" T="DatePeriod" Label="Select Date Period" Variant="Variant.Filled">
            <MudSelectItem Value="DatePeriod.Daily">
                <MudIcon Icon="@Icons.Material.Filled.TaskAlt" Class="mr-1"></MudIcon>
                Daily
            </MudSelectItem>
            <MudSelectItem Value="DatePeriod.Monthly">
                <MudIcon Icon="@Icons.Material.Filled.QueryBuilder" Class="mr-1"></MudIcon>
                Monthly
            </MudSelectItem>
        </MudSelect>
        @{
            bool SelectAllEnabled = SelectedYear is not null;
        }
        @if (_selectedDatePeriod == DatePeriod.Monthly)
        {
            <MudDatePicker Required="true"
                           Label="Select an Year"
                           Date="@SelectedYear"
                           DateChanged="UpdateSelectedYear"
                           OpenTo="OpenTo.Year"
                           FixMonth="@DateTime.Today.Month"
                           FixDay="@DateTime.Today.Day"
                           DateFormat="yyyy"
                           MinDate="@Date.GetStartOfDate(DateSpan.Year, DateTime.Today)"
                           Color="Color.Dark" />

            <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                       MultiSelection="true"
                       @bind-Value="SelectedValue"
                       @bind-SelectedValues="SelectedMonths"
                       T="string"
                       Label="Select Months"
                       SelectAll="@SelectAllEnabled"
                       SelectAllText="Select all months"
                       AnchorOrigin="Origin.BottomCenter">

                @if (SelectedYear is null)
                {
                    <MudSelectItem Disabled="true" T="string">
                        Select an year first
                    </MudSelectItem>
                }
                else
                {
                    @foreach (MonthWithIndex month in AllMonthsWithIndex)
                    {
                        <MudSelectItem Disabled="Date.IsFutureMonth(new DateTime(SelectedYear.Value.Year, month.Index, 1))"
                                       T="string"
                                       Value="@month.Index.ToString()">
                            @month.Name
                        </MudSelectItem>
                    }
                }
            </MudSelect>
        }
        <MudButton Variant="Variant.Filled" Color="Color.Dark" Class="mt-2 ml-auto" OnClick="HandleReportGenerate">Generate Report</MudButton>

        <MudProgressLinear Color="Color.Dark" Value="@Value" Class="my-3" />
    </div>

    <div id="@REPORT_CONTAINER" class="d-flex p-2 flex-column gap-4 w-100">
        <MudGrid>
            @{
                var allOrders = AllOrdersOfSelectedMonths.SelectMany(monthOrders => monthOrders);

                // Group orders by CoffeeType and count the occurrences
                var coffeeTypeCounts = allOrders
                .GroupBy(order => order.CoffeeType)
                .Select(group => new
                {
                    CoffeeType = group.Key,
                    Count = group.Count()
                });

                // Find the most ordered CoffeeType
                var Top5CoffeeTypes = coffeeTypeCounts
                .OrderByDescending(item => item.Count).Take(5);


                var allCoffeeAddIns = AllOrdersOfSelectedMonths
                .SelectMany(monthOrders => monthOrders.SelectMany(order => order.CoffeeAddIns));

                // Group CoffeeAddIns by their properties and count the occurrences
                var coffeeAddInCounts = allCoffeeAddIns
                .GroupBy(coffeeAddIn => new { coffeeAddIn.Id, coffeeAddIn.AddInName })
                .Select(group => new
                {
                    CoffeeAddIn = group.Key,
                    Count = group.Count()
                });

                // Find the most ordered CoffeeAddIn
                var Top5CoffeeAddins = coffeeAddInCounts
                .OrderByDescending(item => item.Count).Take(5);
            }
            @if (Top5CoffeeTypes is not null)
            {

                @foreach(var coffeeType in Top5CoffeeTypes)
                {
                    <ContentCardWithIcon Content="@coffeeType.CoffeeType.CoffeeName" Title="Most Ordered Coffee" Icon="@Icons.Material.Filled.Coffee" />
                }

            }

            @if(Top5CoffeeAddins is not null)
            {
@foreach(var coffeeAddIn in Top5CoffeeAddins)
                {
                    <ContentCardWithIcon Content="@coffeeAddIn.CoffeeAddIn.AddInName" Title="Most Ordered AddIn" Icon="@Icons.Material.Filled.AddCircle" />
                }
            }
        </MudGrid>
                    @foreach (IEnumerable<Order> orders in AllOrdersOfSelectedMonths)
            {
                <SalesReportTable DatePeriod="@_selectedDatePeriod" OrderData="@orders" SelectedDate="@SelectedYear" />;
            }
    </div>
</div>
@code {

    //
    private const string REPORT_CONTAINER = "REPORT_CONTAINER";


    private async void GeneratePdf()
    {
        await Task.Delay(2000);
        string HtmlContent = await JS.InvokeAsync<string>("GetHtmlContentOfAnElement", REPORT_CONTAINER);
        bool Generated = await _pdfService.GeneratePdf(HtmlContent,"testbro");
        if (Generated)
        {
            Snackbar.Add("Report generated successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to generate report", Severity.Error);
        }
    }
    // Table Data
    List<IEnumerable<Order>> AllOrdersOfSelectedMonths = new();
    private string HtmlContent = "";

    //
    private DateTime? SelectedYear { get; set; }
    private DatePeriod _selectedDatePeriod;
    private void UpdateSelectedDatePeriod(DatePeriod datePeriod)
    {
        _selectedDatePeriod = datePeriod;
    }
    private void UpdateSelectedYear(DateTime? dateTime)
    {
        if (dateTime is not null)
        {
            if (Date.IsFirstDateAfterSecondDate(dateTime, DateTime.Today))
            {
                Snackbar.Add("No Reports from the future!", Severity.Error);
                return;
            }
        }
        SelectedYear = dateTime;
    }

    private string SelectedValue { get; set; } = "Nothing selected";
    private IEnumerable<string> SelectedMonths { get; set; } = new HashSet<string>();
    private List<MonthWithIndex> AllMonthsWithIndex = Date.GetListOfMonthsWithIndex();

    private string GetMultiSelectionText(List<string> selectedMonths)
    {
        return string.Join(", ", AllMonthsWithIndex
            .Where(month => selectedMonths.Contains(month.Index.ToString()))
            .Select(month => month.Name));
    }

    //


    // Progress
    private int Value { get; set; } = 0;
    bool _disposed;
    public void Dispose() => _disposed = true;
    public async void SimulateProgress()
    {
        Value = 0;
        do
        {
            if (_disposed)
            {
                return;
            }

            Value += 4;
            StateHasChanged();
            await Task.Delay(500);

        } while (Value < 100);

        SimulateProgress();
    }


    // Report Generation
    private async void HandleReportGenerate()
    {

        if (_selectedDatePeriod == DatePeriod.Daily)
        {
            // Generate Daily Report

        }

        if(_selectedDatePeriod == DatePeriod.Monthly)
        {
            // Generate Monthly Report
            if (SelectedYear is null)
            {
                Snackbar.Add("Please select an year", Severity.Error);
                return;
            }

            if (SelectedMonths.Count() == 0)
            {
                Snackbar.Add("Please select atleast one month", Severity.Error);
                return;
            }

            // Generate Report
            foreach (string month in SelectedMonths)
            {
                DateTime StartDate = new(SelectedYear.Value.Year, int.Parse(month), 1);
                DateTime EndDate = Date.GetEndOfDate(DateSpan.Month, StartDate);
                IEnumerable<Order> OrdersOfSelectedMonth = _orderService.GetOrdersWithInTimeRange(StartDate, EndDate);
                AllOrdersOfSelectedMonths.Add(OrdersOfSelectedMonth);
            }

            GeneratePdf();


        }

            

        }
}

