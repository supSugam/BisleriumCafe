@page "/dashboard/overview"
@using BisleriumCafe.Helpers;
@inject BisleriumCafe.Services.OrderService _orderService;
@inject BisleriumCafe.Services.AuthService _authService;
@inject ISnackbar Snackbar;
<div class="d-flex justify-content-center gap-3 flex-column">
    <MudText Typo="Typo.h4" Color="Color.Dark">
        Generate Sales Report
</MudText>
<div class="d-flex gap-3 shadow background-light w-100 p-4 justify-content-center flex-column">

    <MudSelect Value="_selectedDatePeriod" ValueChanged="(DatePeriod datePeriod)=>UpdateSelectedDatePeriod(datePeriod)" T="DatePeriod" Label="Select Date Period" Variant="Variant.Filled">
        <MudSelectItem Value="DatePeriod.Daily">
            <MudIcon Icon="@Icons.Material.Filled.TaskAlt" Class="mr-1"></MudIcon>
            Daily
        </MudSelectItem>
        <MudSelectItem Value="DatePeriod.Monthly">
            <MudIcon Icon="@Icons.Material.Filled.QueryBuilder" Class="mr-1"></MudIcon>
            Monthly
        </MudSelectItem>
    </MudSelect>

    @if (_selectedDatePeriod == DatePeriod.Monthly)
    {
                        <MudDatePicker Required="true"
                       Label="Select an Year"
                       Date="@SelectedYear"
                       DateChanged="UpdateSelectedYear"
                       OpenTo="OpenTo.Year"
                       FixMonth="@DateTime.Today.Month"
                       FixDay="@DateTime.Today.Day"
                       DateFormat="yyyy"
                       MaxDate="@DateTime.Today"
MinDate="@DateTime.Today.AddYears(-2)"
Color="Color.Dark"
                       />

        <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                   MultiSelection="true"
                   @bind-Value="SelectedValue"
                   @bind-SelectedValues="SelectedMonths"
                   T="string"
                   Label="Select Months"
                   SelectAll="true"
                   SelectAllText="Select all months"
                   AnchorOrigin="Origin.BottomCenter">

                   @if(SelectedYear is null){
                       <MudSelectItem Disabled="true" T="string">
                           Select an year first
                    </MudSelectItem>
                }
                else
                {
                                    @foreach (MonthWithIndex month in AllMonthsWithIndex)
                {
                    <MudSelectItem Disabled="!Date.IsPastOrCurrentMonth(new DateTime(SelectedYear.Value.Year, month.Index, 1))"
                                   T="string"
                                   Value="@month.Index.ToString()">
                        @month.Name
                    </MudSelectItem>
                }                    
                }               
}

        </MudSelect>
    }
    </div>
</div>
@code{
    private DateTime? SelectedYear { get; set; }
    private DatePeriod _selectedDatePeriod;
    private void UpdateSelectedDatePeriod(DatePeriod datePeriod)
    {
        _selectedDatePeriod = datePeriod;
    }
    private void UpdateSelectedYear(DateTime? dateTime)
    {
            SelectedYear = dateTime;
            Snackbar.Add($"Selected Year: {SelectedYear.Value.Year}", Severity.Success);
    }

    private string SelectedValue { get; set; } = "Nothing selected";
    private IEnumerable<string> SelectedMonths { get; set; } = new HashSet<string>();
    private List<MonthWithIndex> AllMonthsWithIndex = Date.GetListOfMonthsWithIndex();

    private string GetMultiSelectionText(List<string> selectedMonths)
    {
        return string.Join(", ", AllMonthsWithIndex
            .Where(month => selectedMonths.Contains(month.Index.ToString()))
            .Select(month => month.Name));
    }


    //
    private string searchString1 = "";
    private IEnumerable<Order> OrdersList = new List<Order>();

    private bool FilterFunc1(Order order) => FilterFunc(order, searchString1);
    private bool FilterFunc(Order order, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (order.CoffeeType.CoffeeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;

    }
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(0);
        OrdersList = _orderService.GetAllOrders();
    }
}