@page "/login"
@using System.ComponentModel.DataAnnotations
@using BisleriumCafe.Helpers
@using BisleriumCafe.Services
@inject ISnackbar Snackbar;
@inject Microsoft.AspNetCore.Components.NavigationManager _navigationManager;
@inject BisleriumCafe.Services.AuthService _authService;

<div class="d-flex w-100 h-100 align-items-center justify-content-center">
    <EditForm OnValidSubmit="OnValidSubmit" Model="@model">
        <DataAnnotationsValidator />
        <MudGrid Style="justify-content:center!important">
            <MudItem xs="12" sm="12">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Username" HelperText="Atleast 3 characters long."
                                      @bind-Value="model.Username" For="@(() => model.Username)" />

                        <MudTextField Label="Password" Class="mt-3"
                                      @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                        <MudSwitch Label="Stay Logged In" @bind-Value="@StayLoggedIn" Color="Color.Dark" UnCheckedColor="Color.Default" />

                    </MudCardContent>
                    <MudCardActions>
                        <MudLink Class="mr-auto" Href="/signup">Don't have an account? Sign up</MudLink>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Dark" Class="ml-auto">Login</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.body2" Align="Align.Center">
                    Login using your username and password.
                </MudText>
            </MudItem>
        </MudGrid>
    </EditForm>
</div>

@code {
    LoginAccountForm model = new LoginAccountForm();
    private bool StayLoggedIn = false;

    public class LoginAccountForm
    {

        [Required]
        [MinLength(3, ErrorMessage = "Name length must be at least 3 characters long.")]
        public string Username { get; set; }= "";

        // [Required] , MinimumLength = 1
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.")]
        public string Password { get; set; }= "";

    }

    private async void OnValidSubmit(EditContext context)
    {
        StateHasChanged();
        string username = model.Username;
        string password = model.Password;
        try
        {
            TaskResponse reponse = await _authService.Login(username, password, StayLoggedIn);
            Snackbar.Add(reponse.Message, reponse.IsSuccess ? Severity.Success : Severity.Error);
if (reponse.IsSuccess)
            {
                _navigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
        }
    }
}
