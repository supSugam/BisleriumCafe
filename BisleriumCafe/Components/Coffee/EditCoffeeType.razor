@using BisleriumCafe.Helpers;
@inject ISnackbar Snackbar;
@inject BisleriumCafe.Services.AuthService _authService;
<EditForm OnValidSubmit="OnFormSubmit"
    Model="@EditCoffeeFormModel">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Coffee Name" HelperText="Enter name of the coffee."
                                  @bind-Value="EditCoffeeFormModel.CoffeeName" For="@(() => EditCoffeeFormModel.CoffeeName)" Required="true" />

                    <MudTextField Label="Coffee Description" HelperText="Enter description of the coffee."
                                  @bind-Value="EditCoffeeFormModel.CoffeeDescription" For="@(() => EditCoffeeFormModel.CoffeeDescription)" />

                    <MudNumericField @bind-Value="EditCoffeeFormModel.CoffeePrice" Label="Coffee Price" Min="0" Max="1000" Step="10" HideSpinButtons="true" Required="true" />
                    <MudTextField InputType="InputType.Password" Label="Enter Password" HelperText="Enter admin password for verification."
                                  @bind-Value="EditCoffeeFormModel.Password" For="@(() => EditCoffeeFormModel.Password)" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Dark" Class="ml-auto">
                        Update
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter] public CoffeeType CoffeeType { get; set; }
    [Parameter] public Func<CoffeeType, Task> OnConfirmEditClick { get; set; }
    CoffeeForm EditCoffeeFormModel = new CoffeeForm();
    private User? CurrentUser => _authService.CurrentUser;

    private void OnFormSubmit(EditContext context)
    {
        StateHasChanged();
        if (CurrentUser is null || CurrentUser.Role != UserRole.Admin)
        {
            Snackbar.Add("You are not authorized to perform this action.", Severity.Error);
            return;

        }
        if (!Hasher.VerifyHash(EditCoffeeFormModel.Password, CurrentUser.PasswordHash))
        {
            Snackbar.Add("Incorrect password.", Severity.Error);
            return;
        }
        CoffeeType coffeeType = new CoffeeType
        (
            EditCoffeeFormModel.CoffeeName,EditCoffeeFormModel.CoffeeDescription,EditCoffeeFormModel.CoffeePrice
        );
        coffeeType.Id = CoffeeType.Id;
        coffeeType.CreatedBy = CoffeeType.CreatedBy;
        coffeeType.CreatedAt = CoffeeType.CreatedAt;
coffeeType.UpdatedAt = DateTime.Now;

         OnConfirmEditClick(coffeeType);
    }

    protected override async Task OnInitializedAsync()
    {
        EditCoffeeFormModel.CoffeeName = CoffeeType.CoffeeName;
        EditCoffeeFormModel.CoffeeDescription = CoffeeType.CoffeeDescription;
        EditCoffeeFormModel.CoffeePrice = CoffeeType.CoffeePrice;
    }

    public class CoffeeForm
    {
        [Required]
        [MinLength(3, ErrorMessage = "Name length must be at least 3 characters long.")]
        public string CoffeeName { get; set; } = "";

        public string CoffeeDescription { get; set; } = "";

        [Range(0, 1000, ErrorMessage = "Price must be between 0 and 1000.")]
        public int CoffeePrice { get; set; } = 0;
        [Required]
        public string Password { get; set; } = "";
    }
}
